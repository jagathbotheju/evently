// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           String    @default("USER")
  accounts       Account[]
  sessions       Session[]
  event          Event[]
  order          Order[]
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  image       String
  startDate   DateTime @default(now())
  endDate     DateTime @default(now())
  price       String
  isFree      Boolean  @default(false)
  url         String?

  organizer String @db.ObjectId
  user      User   @relation(fields: [organizer], references: [id])

  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])

  orderId String? @db.ObjectId
  order   Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Category {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String  @unique
  Event Event[]
}

model Order {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  stripeId    String   @unique
  totalAmount String
  event       Event[]
  buyer       String   @db.ObjectId
  user        User     @relation(fields: [buyer], references: [id])
}

enum Role {
  USER
  ADMIN
}
